generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  isGM           Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  sessions       Session[]
  memberships    Membership[]
  groupsOwned    Group[]        @relation("GroupOwner")
  availabilities Availability[]
}

model Group {
  id             String         @id @default(uuid())
  ownerId        String
  owner          User           @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  createdAt      DateTime       @default(now())
  memberships    Membership[]
  invites        Invite[]
  events         Event[]
  availabilities Availability[]
}

model Membership {
  userId    String
  groupId   String
  role      String   @default("player")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model Invite {
  id        String    @id @default(uuid())
  groupId   String
  token     String    @unique
  usesLeft  Int?
  expiresAt DateTime?
  createdBy String?
  createdAt DateTime  @default(now())
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Availability {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  tz        String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, date])
}

model Event {
  id              String   @id @default(uuid())
  groupId         String
  scheduledAt     DateTime
  durationMinutes Int
  title           String
  notes           String?
  createdBy       String?
  createdAt       DateTime @default(now())
  group           Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

// Auth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
